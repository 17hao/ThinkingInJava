plugins {
    id "java"
    id "groovy"
    id "com.google.protobuf" version "0.8.8"
}

group = 'xyz.shiqihao'
description = 'java-tour'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation(
            'org.junit.jupiter:junit-jupiter-api:5.3.1',
            'com.google.code.gson:gson:2.8.5',
            'org.apache.logging.log4j:log4j-api:2.12.1',
            'org.apache.logging.log4j:log4j-core:2.12.1',
            'org.slf4j:slf4j-api:1.7.25',
            'org.slf4j:slf4j-simple:1.7.25',
            'redis.clients:jedis:2.9.0',
            'org.apache.kafka:kafka-clients:2.4.0',
            'javax.inject:javax.inject:1',
            'com.google.inject:guice:4.2.2',
            'io.grpc:grpc-netty-shaded:1.24.0',
            'io.grpc:grpc-protobuf:1.24.0',
            'io.grpc:grpc-stub:1.24.0',
            'com.lmax:disruptor:3.4.2',
            'io.netty:netty-all:4.1.42.Final',
            'javax.servlet:javax.servlet-api:4.0.0',
            'org.codehaus.groovy:groovy:2.5.8',
            'org.mybatis:mybatis:3.5.3',
            'org.postgresql:postgresql:42.2.9',
            'com.orbitz.consul:consul-client:1.4.0',
            'org.hashids:hashids:1.0.3'
    )
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/proto/generated'
        }
    }
}

protobuf {
    // Configure the protoc executable.
    protoc {
        artifact = "com.google.protobuf:protoc:3.9.0" // Download from repositories.
        // path = "/usr/local/bin/protoc" // you may alse specify a local path.
    }
    // Locate the codegen plugin.
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.19.0"
            // or
            // path = ""
        }
    }
    // Customize code generation tasks.
    // Each code generation task has two collections:
    // - builtins: code generators built in protoc, e.g. java, python
    // - plugins: code generation plugin work with protoc, e.g. grpc
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {}
            }
        }
    }
    generatedFilesBaseDir = "$projectDir/src/main/proto/generated"
}